events {

}

http {

    upstream myapp {
        server host.docker.internal:3000;
    }

    server {
        listen 80;

        location / {
            # Proxy para o Node.js
            proxy_pass http://myapp;          
            # Repassa o host original
            proxy_set_header Host $host;              
            # Preserva o IP do cliente
            proxy_set_header X-Real-IP $remote_addr;  
            # Preserva o IP do cliente em caso de proxy
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Repassa headers ETag e Last-Modified do Browser
            proxy_set_header If-None-Match $http_if_none_match;
            proxy_set_header If-Modified-Since $http_if_modified_since;

            # Cache do Nginx baseado no controle definido pelo Node.js
            proxy_cache node_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";

            # Desabilitar cache se $no_cache for 1 (ou seja, no-store está presente)
            proxy_cache_bypass $http_cache_control;

            # Adicione cabeçalhos para depuração
            # Exibe o status do cache (HIT, MISS)
            add_header X-Cache-Status $upstream_cache_status; 
        }

        location /static/ {
            root /var/www/html;
            # Define caching no lado do cliente por 30 dias
            #expires 30d;
            # Arquivos podem ser compartilhados em cache público
            add_header Cache-Control "public, max-age=20";
        }
    }

    # Configuração do cache - Define o cache e o diretório
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=node_cache:10m max_size=1g inactive=60m;

}
